menu = 0
menu = int(input ('''Wilkommen bei meinen Lösungen von Projekt Euler. 
                      Welches Problem wälst du?  '''))
print('''
''')

if menu == 1:
    def test(g):
        print("Find the sum of all multiples of 3 or 5 below ",g,'''. (Problem 1)
        ''')
        d = 0
        f = 0
        n = 0
        s = 0
        while d < g:
            n += 1
            d = 3*n
            s += d
            if d < g:
                s += d
                #print (d) nicht zwingend nötig
        n = 0
        while f < g:
            n += 1
            f = 5*n
            if f < g:
                s += f
                #print (f) nicht zwingend nötig
        return("The sum of all multiples of 3 or 5 below "+str(g)+" is "+str(s))
    
    print(test(10))


if menu == 2:
    def test(g):
        print("Find the sum of all the even-valued terms in the sequence which do not exceed ",g,'''.
        ''')
        a = 1
        b = 0
        c = 1
        s = 0
        while a < g:
            c = a
            a += b
            b = c
            if a % 2 == 0 and a < g:
                s += a
        return("The sum of all the even-valued terms in the sequence which do not exceed "+str(g)+" is "+str(s))
    print(test(4000000))

if menu == 3:
    print('''Welche größte Primzahl hat 600851475143?
    ''')
    n = 2
    p = 13194
    s = 0
    while p > 2:
        if 13195 % p == 0:
            while not p % n == 0 or not n == p:
                n = n + 1
            
            if n == p and p > s:
                s = p
            n = 2
        p = p - 1
    print(s)

    print('''What is the largest prime factor of the number 600851475143 ?
 Antwort:
 Die Haupfaktoren von 600851475143 sind:''')
    n = 2
    p = 600851475143
    s = 0
    while not n == p:
        if p % n == 0:
            p = p / n
            print(n)
            if n > s:
                s = n
            n = 2
        else:
            n = n + 1
    if n > s:
        s = n
    print( str(n) + '''
Und der größte Primfaktor davon ist: '''+ str(s))

if menu == 4:
    def test(f, h, g):
        print("Find the largest parlindrome made from the product of two ",f,'''-digit numbers.
        ''')
        n = g
        p = g
        s = 0
        ns = 0
        nn = 0
        np = 0
        while n > h:
            while p > h:
                s = str(n * p)
                if s == s[::-1] and int(s) > int(ns):
                        ns = s
                        nn = n
                        np = p
                p -= 1
            p = g
            n = n - 1
        return ("The largest parlindrome made from the product of two " +str(f)+ '''-digit numbers is 
       '''+str(nn)+" x "+str(np)+" = "+str(ns))
    
    print(test(3, 100, 999))

if menu == 5:
    def test(g):
        print("What is the smallest positive number that is evenly divisible by all of the numbers from 1 to ",g,''' ?
        ''')
        n = 11
        p = 1
        while p < g:
            if n % p == 0:
                p += 1
            
            else:
                p = 1
                n += 1
        return("The smallest positive number that is evenly divisible by all of the numbers from 1 to "+str(g)+" is "+str(n))
    print(test(10))

if menu == 6:
    def test(g):
        print("Find the difference between the sum of the squares of the first ",g,''' natural numbers and the square of the sum.
        ''')
        qn = 1
        qp = 1
        qs = 0
        nq = 1
        sq = 0
        for zähle in range(g):
            qp = qn*qn
            qs += qp
            qn += 1
        for zählen in range(g):
            sq += nq
            nq += 1
        sq = sq * sq
        return ("The difference between the sum of the squares of the first one "+str(g)+" natural numbers and the square of the sum is: "+str(sq-qs))
    print(test(100))

if menu == 7:
    def test(g):
        print("What is the ",g,'''st prime number?
        ''')
        p = 1
        n = 2
        for zähler in range(g):
            p+= 1
            n = 2
            while not n == p:
                while not p % n == 0:
                    n += 1
                if not n == p:
                    n = 2
                    p += 1
            # print(p) wenn es nicht zu viele durchläufe in der for-Schleife sind
        return ("Die "+str(g)+"ste Zahl ist: "+str(p))

    print (test(1001))

if menu == 8:
    d = "73167176531330624919225119674426574742355349194934\
96983520312774506326239578318016984801869478851843\
85861560789112949495459501737958331952853208805511\
12540698747158523863050715693290963295227443043557\
66896648950445244523161731856403098711121722383113\
62229893423380308135336276614282806444486645238749\
30358907296290491560440772390713810515859307960866\
70172427121883998797908792274921901699720888093776\
65727333001053367881220235421809751254540594752243\
52584907711670556013604839586446706324415722155397\
53697817977846174064955149290862569321978468622482\
83972241375657056057490261407972968652414535100474\
82166370484403199890008895243450658541227588666881\
16427171479924442928230863465674813919123162824586\
17866458359124566529476545682848912883142607690042\
24219022671055626321111109370544217506941658960408\
07198403850962455444362981230987879927244284909188\
84580156166097919133875499200524063689912560717606\
05886116467109405077541002256983155200055935729725\
71636269561882670428252483600823257530420752963450"
    def test(d, z):
        print('''Find the ''',z,''' adjacent digits in the 1000-digit number that have the greatest product. 
What is the value of this product?''')
        s = 0
        for i in range(0, len(d) - z):
            p = d[i:i+z]
            a = 1
            for f in p:
                a*= int(f)
            if a > s:
                s = a
        return s
    print (str(test(d, 13)))
    # hier wird eine funktion erstellt, in der Die Stings abgelaufen werden sollen. 
    # s ist der endwert, die forschleife wird alle Zahlen einzeln ablaufen, da sie als Strings gespeichert sind und da jerder Buchstabe/ Zahl einzeln durchgelaufen wird. 
    # #Die letzten 3 Zahlen sollen übersprungen werden, da es imer eine 4 combo sein muss. deswegen werden sie im range abgezogen vom len(d) (der länge des Strings) 
    # Die aktulle Zahl/ Buchstabe welcher Momentan durchlaufen wird, wird i genannt. p speichert diese und die kommenden 4 Zahlen als String in sich. 
    # In a soll später das Ergebnis der Zhalenfolge ausmultipliziert gespeichert werden. Also ist in a eine 1. In der nächsten for-Schleife wird dr String von p, also die einzelnen 4 Zahlen durchlaufen.
    # Diese werden f genannt. a wird mit der aktuellen Zahl multipliziert, dafür muss der Wert von f jetzt zu einem int werden. Wiederholt bis die 4 Zahlen durch sind.
    # am Ende wird der Wert von a mit dem Momentan gespeicherten Endwert verglichen. Da wir einen möglich großen Endwert suchen, wird der Momentane Endwert überschriebne, wenn a größer ist.
    # am Ende liefert die Funktion das Ergebnis von s zurück. 
    # Nach der Funktion, führt print die Funtkion aus, mit d und einem Wert von 4. Dadurch entstehen die berehnungen

if menu == 9:
    def test(t, g):
        print("Find the Pythagorean triplet for which + + = ",t,'''.
        ''')
        a = 0
        b = 0
        c = 0
        s = 0
        for f in range(g):
            a+= 1
            for p in range(g):
                b+= 1
                c = 0
                c = (a*a) + (b*b)
                if c == t:
                    s = c
                    return (str(a) + "^2 + " + str(b) + "^2 = " + str(s) )
            b = 0
    print(test(1000, 31)) #Dadurch dass es eine Funktion ist, kann man das zu findene Triblet ändern: a^2 + b^ = c^2 --> test(c^2, c)

if menu == 10:
    def test(g):
        print("Find the sum of all the primes below ",g,'''.
        ''')
        p = 1
        n = 2
        s = 0
        while p < g:
            p+= 1
            n = 2
            while not n == p:
                while not p % n == 0:
                    n += 1
                if not n == p:
                    n = 2
                    p += 1
            if p < g:
                s += p
            # print(p) wenn es nicht zu viele durchläufe sind
        return ("The sum of all the primes below "+str(g)+" is "+str(s))

    print (test(200))

if menu == 11:
    s = 0
    pa = 0
    pb = 0
    pc = 0
    pd = 0

    def test():
        d = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"
        
        i = 0
        for i in range(0,400,20):
            j = i
            for j in range(0,40, 2): 
                if j > (i + 18):    # links nach rechts
                    pa = d[j:j+1]
                    pb = d[j+2:j+3]
                    pc = d[j+4:j+5]
                    pd= d[j+6:j+7]
                    a = int(pa) * int(pb) * int(pc) * int(pd)
                    if a > s:
                        s = a
                    j += 1
                i += 20
        return ("der größt ausmultiplierzierbarer wert ist :", str(s))

    print(test())

if menu == 12:
    def test(g):
        print("What is the value of the first triangle number to have over ",g,''' divisors?
        ''')
        p = 1
        n = 1
        d = 0
        z = 1
        t = 0
        while t < g:
            d += p
            #print(d, ":")
            z = 1
            t = 0
            while z <= d:
                if d % z == 0 or d == z:
                    t += 1
                    #print(z)
                z += 1
            p += 1
        return(d)
    print(test(5))

if menu == 13:
    print("Ach scheiß drauf")

if menu == 14:
    def test(g):
        print("Which starting number, under ",g,""", produces the longest chain?
        """)
        s = 0
        p = 1
        while p <= g:
            a = p
            #print("Startzahl: ",a)
            z = 1
            while not a == 1:
                z +=1
                if a % 2 == 0:
                    a /= 2
    
                else:
                    a = (a * 3) + 1
            #print("Durchläufe: ",z)
            if z > s:
                s = z
                sp = p
            p += 1
        return ("Die Startzahl mit der längsten Kette lautet: "+str(sp)+ '''. 
Sie hat: '''+str(s)+ " Dürchläufe.")
    print(test(100))

if menu == 15:
    def test(k):
        print(" Wie viele Routen gibt es, in einem ",k," x ",k,''' Raster, 
        von der oberern linken Ecke bis zur unteren rechten Ecke, 
        wenn man sich nur nach unten und nach rechts bewegen darf?
        ''')
        n = k*2
        a = 1
        b = 1
        bn = (n - k)
        s = 0

        while not n == 0:
            a *= n
            n -= 1
        k
        while not k == 0:
            b *= k
            k -= 1

        while not bn == 0:
            b *= bn
            bn -= 1
      
        s = a / b
        return ("Es gibt " + str(s) +" Routen.")
    print(test(2))

if menu == 16:
    def test(p, n):
        print("Was ist die Summer der Ziffern der Zahl "+str(p)+"^"+str(n)+''' ?
       ''')
        s = 1
        sz = 0
        while not n == 0:
            s *= p
            n -= 1
        for f in str(s):
            sz += int(f)
        return ("Die Summe der Ziffer "+str(s)+" lautet: "+str(sz)+".")
    print(test(2,15))

if menu == 17:
    ziffern = { 1: one, 2: two}

if menu == 18:
    def test():
        a = [[3],
            [3,4],
            [2,4,6],
            [8,5,9,3]]
        while not (len(a) == 1):
            for i in range(len(a[:-2])): #[-2] beginnt vom ende, also vorletzter Artikel
                a[-2][i] += max(a[-1][i], a[-1][i+1])
            a.pop(-1)
            for f in a:
                print(f)
                break
      
    test()

        
       